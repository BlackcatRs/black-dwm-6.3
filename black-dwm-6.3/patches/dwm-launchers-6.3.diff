diff --git a/black-dwm-6.3/config.def.h b/black-dwm-6.3/config.def.h
index e70feae..431e1e0 100644
--- a/black-dwm-6.3/config.def.h
+++ b/black-dwm-6.3/config.def.h
@@ -31,6 +31,13 @@ static const char *colors[][3]      = {
 /* static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" }; */
 static char *tags[] = {"", "", "", "", ""};
 
+static const char* chrome[] = { "google-chrome-stable", NULL };
+
+static const Launcher launchers[] = {
+    /* command     name to display */
+    { chrome,         "" },
+};
+
 static const unsigned int ulinepad	= 5;	/* horizontal padding between the underline and tag */
 static const unsigned int ulinestroke	= 2;	/* thickness / height of the underline */
 static const unsigned int ulinevoffset	= 0;	/* how far above the bottom of the bar the line should appear */
@@ -43,10 +50,6 @@ static const char *tagsel[][2] = {
   { orange,  black, },
   { green,   black, },
   { pink,    black, },
-  { "#ffffff", "#4b0082" },
-  { "#ffffff", "#9400d3" },
-  { "#000000", "#ffffff" },
-  { "#ffffff", "#000000" },
 };
 
 static const Rule rules[] = {
diff --git a/black-dwm-6.3/dwm.c b/black-dwm-6.3/dwm.c
index cbb5063..759efc8 100644
--- a/black-dwm-6.3/dwm.c
+++ b/black-dwm-6.3/dwm.c
@@ -60,10 +60,7 @@
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
 /* color schemes */
-enum { SchemeNorm,
-       SchemeSel,
-       SchemeLayout
-};
+enum { SchemeNorm, SchemeSel, SchemeLayout };
 enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
        NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
@@ -145,6 +142,11 @@ typedef struct {
 	int monitor;
 } Rule;
 
+typedef struct {
+	const char** command;
+	const char* name;
+} Launcher;
+
 /* function declarations */
 static void applyrules(Client *c);
 static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
@@ -444,9 +446,26 @@ buttonpress(XEvent *e)
 		if (i < LENGTH(tags)) {
 			click = ClkTagBar;
 			arg.ui = 1 << i;
-		} else if (ev->x < x + blw)
+			goto execute_handler;
+		} else if (ev->x < x + blw) {
 			click = ClkLtSymbol;
-		else if (ev->x > selmon->ww - (int)TEXTW(stext))
+			goto execute_handler;
+		}
+
+		x += blw;
+
+		for(i = 0; i < LENGTH(launchers); i++) {
+			x += TEXTW(launchers[i].name);
+			
+			if (ev->x < x) {
+				Arg a;
+				a.v = launchers[i].command;
+				spawn(&a);
+				return;
+			}
+		}	
+
+		if (ev->x > selmon->ww - (int)TEXTW(stext))
 			click = ClkStatusText;
 		else
 			click = ClkWinTitle;
@@ -456,6 +475,9 @@ buttonpress(XEvent *e)
 		XAllowEvents(dpy, ReplayPointer, CurrentTime);
 		click = ClkClientWin;
 	}
+
+execute_handler:
+	
 	for (i = 0; i < LENGTH(buttons); i++)
 		if (click == buttons[i].click && buttons[i].func && buttons[i].button == ev->button
 		&& CLEANMASK(buttons[i].mask) == CLEANMASK(ev->state))
@@ -845,9 +867,17 @@ drawbar(Monitor *m)
 	}
 
 	w = blw = TEXTW(m->ltsymbol);
+	/* Color scheme of layout indicator */
 	drw_setscheme(drw, scheme[SchemeLayout]);
 	x = drw_text(drw, x, 0, w, bh, lrpad / 2, m->ltsymbol, 0);
 
+	for (i = 0; i < LENGTH(launchers); i++)
+	  {
+	    w = TEXTW(launchers[i].name);
+	    drw_text(drw, x, 0, w, bh, lrpad / 2, launchers[i].name, urg & 1 << i);
+	    x += w;
+	  }
+
 	if ((w = m->ww - tw - x) > bh) {
 		if (m->sel) {
 			drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
